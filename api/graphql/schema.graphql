# types for User object

enum ROLE {
  ADMIN
  MODERATOR
  USER
}

type User {
  id: ID!
  username: String!
  email: String!
  firstname: String!
  lastname: String!
  name: String!
  role: String!
  registered: String!
  recipes: [Recipe!]
  recipeCount: Int!
  likedRecipes: [Recipe!]
  likedRecipeCount: Int!
  followees: [User!]
  followeeCount: Int!
  followers: [User!]
  followerCount: Int!
}

type Token {
  token: String!
}

extend type Query {
  me: User
  users: [User!]!
  user(input: UserInput): User
  userCount: Int!
}

input UserInput {
  username: String
}

extend type Mutation {
  signup(input: SignUpInput!): Boolean!
  login(input: LogInInput!): Token
  followUser(input: FollowUserInput!): User!
  updateUser(input: UpdateUserInput!): User!
  updateUsername(input: UpdateUsernameInput!): User!
  updatePassword(input: UpdatePasswordInput!): Boolean!
  deleteAccount(input: deleteAccountInput!): Boolean!
}

input SignUpInput {
  firstname: String!
  lastname: String!
  email: String!
  username: String!
  password: String!
}

input LogInInput {
  usernameOrEmail: String!
  password: String!
}

input FollowUserInput {
  username: String!
}

input UpdateUserInput {
  password: String!
  firstname: String
  lastname: String
  email: String
}

input UpdateUsernameInput {
  password: String!
  newUsername: String!
}

input UpdatePasswordInput {
  password: String!
  newPassword: String!
}

input deleteAccountInput {
  password: String!
}

# types for Recipe object

enum Category {
  BREAKFAST
  SALAD
  SOUP
  MAIN
  DESSERT
}

enum Difficulty {
  EASY
  INTERMEDIATE
  HARD
}

type Recipe {
  id: ID!
  author: User!
  category: Category!
  title: String!
  description: String!
  cookingTime: Int!
  difficulty: Difficulty!
  ingredients: [String!]!
  method: [String!]!
  notes: [String!]
  tags: [String!]
  source: String
  created: String!
  updated: String!
  published: Boolean!
  likedBy: [User!]
  comments: [Comment!]!
  rating: Float
}

type Comment {
  id: ID!
  author: User!
  content: String!
}

extend type Query {
  recipes: [Recipe!]!
  recipe(input: RecipeInput!): Recipe
  recipeCount: Int!
}

input RecipeInput {
  id: ID!
}

extend type Mutation {
  createRecipe(input: CreateRecipeInput!): Recipe!
  updateRecipe(input: UpdateRecipeInput!): Recipe!
  publishRecipe(input: PublishRecipeInput!): Recipe!
  commentRecipe(input: CommentRecipeInput!): Recipe!
  updateComment(input: CommentRecipeInput!): Recipe!
  deleteComment(input: DeleteCommentInput!): Recipe!
  likeRecipe(input: LikeRecipeInput!): Recipe!
  unlikeRecipe(input: UnlikeRecipeInput!): Recipe!
  rateRecipe(input: RateRecipeInput!): Recipe!
  deleteRecipe(input: DeleteRecipeInput!): Boolean!
}

input CreateRecipeInput {
  category: Category!
  title: String!
  description: String!
  cookingTime: Int!
  difficulty: Difficulty!
  ingredients: [String!]!
  method: [String!]!
  notes: [String!]
  tags: [String!]
  source: String
}

input UpdateRecipeInput {
  category: Category
  title: String
  description: String
  cookTime: Int
  difficulty: Difficulty
  ingredients: [String!]
  method: [String!]
  notes: [String!]
  tags: [String!]
  source: String
}

input PublishRecipeInput {
  id: ID!
}

input CommentRecipeInput {
  content: String!
}

input UpdateCommentInput {
  id: ID!
  content: String!
}

input DeleteCommentInput {
  id: ID!
}

input LikeRecipeInput {
  id: ID!
}

input UnlikeRecipeInput {
  id: ID!
}

input RateRecipeInput {
  grade: Int!
}

input DeleteRecipeInput {
  id: ID!
}

# Root Query and Mutation types to extend from

type Query
type Mutation
