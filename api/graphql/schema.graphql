# types for User object

enum Role {
  ADMIN
  MODERATOR
  USER
}

type User {
  id: ID!
  name: String!
  email: String
  username: String!
  role: String
  registered: String!
  recipes: [Recipe!]!
  recipeCount: Int!
  publishedRecipes: [Recipe!]!
  publishedRecipeCount: Int!
  unpublishedRecipes: [Recipe!]!
  unpublishedRecipeCount: Int!
  likedRecipes: [Recipe!]
  likedRecipeCount: Int!
  following: [User!]
  followeeCount: Int!
  followers: [User!]
  followerCount: Int!
}

type Token {
  token: String!
}

extend type Query {
  me: User
  users(input: UsersInput): [User!]!
  user(input: UserInput): User
  userCount: Int!
}

input UsersInput {
  name: String!
}

input UserInput {
  id: ID
  username: String
}

extend type Mutation {
  signup(input: SignUpInput!): Boolean!
  login(input: LogInInput!): Token
  followUser(input: FollowUserInput!): User!
  unfollowUser(input: UnfollowUserInput!): User!
  updateName(input: UpdateNameInput!): User!
  updateEmail(input: UpdateEmailInput!): User!
  updateUsername(input: UpdateUsernameInput!): User!
  updatePassword(input: UpdatePasswordInput!): Boolean!
  deleteAccount(input: DeleteAccountInput!): Boolean!
}

input SignUpInput {
  name: String!
  email: String!
  username: String!
  password: String!
}

input LogInInput {
  usernameOrEmail: String!
  password: String!
}

input FollowUserInput {
  idToFollow: ID!
}

input UnfollowUserInput {
  idToUnfollow: ID!
}

input UpdateNameInput {
  newName: String
}

input UpdateEmailInput {
  newEmail: String!
}

input UpdateUsernameInput {
  newUsername: String!
}

input UpdatePasswordInput {
  password: String!
  newPassword: String!
}

input DeleteAccountInput {
  password: String!
}

# types for Recipe object

enum Category {
  BREAKFAST
  SALAD
  SOUP
  MAIN
  DESSERT
}

enum Difficulty {
  EASY
  INTERMEDIATE
  HARD
}

type Recipe {
  id: ID!
  author: User!
  category: Category!
  title: String!
  description: String!
  cookingTime: Int!
  difficulty: Difficulty!
  ingredients: [String!]!
  method: [String!]!
  notes: [String!]
  tags: [String!]
  created: String!
  updated: String!
  published: Boolean!
  likedBy: [User!]
  likes: Int!
  ratings: [Grade!]!
  rating: Float!
  comments: [Comment!]!
  commentCount: Int!
}

type Comment {
  id: ID!
  author: User!
  content: String!
  created: String!
  updated: String!
}

type Grade {
  user: ID!
  grade: Int!
}

extend type Query {
  recipes: [Recipe!]!
  recipeCount: Int!
  publishedRecipes: [Recipe!]!
  publishedRecipeCount: Int!
  recipe(input: RecipeInput!): Recipe
}

input RecipeInput {
  id: ID!
}

extend type Mutation {
  createRecipe(input: CreateRecipeInput!): Recipe!
  updateRecipe(input: UpdateRecipeInput!): Recipe!
  publishRecipe(input: PublishRecipeInput!): Recipe!
  unpublishRecipe(input: UnpublishRecipeInput!): Recipe!
  commentRecipe(input: CommentRecipeInput!): Recipe!
  editComment(input: EditCommentInput!): Recipe!
  deleteComment(input: DeleteCommentInput!): Recipe!
  likeRecipe(input: LikeRecipeInput!): User!
  unlikeRecipe(input: UnlikeRecipeInput!): User!
  rateRecipe(input: RateRecipeInput!): Recipe!
  deleteRecipe(input: DeleteRecipeInput!): Boolean!
}

input CreateRecipeInput {
  category: Category!
  title: String!
  description: String!
  cookingTime: Int!
  difficulty: Difficulty!
  ingredients: [String!]!
  method: [String!]!
  notes: [String!]
  tags: [String!]
}

input UpdateRecipeInput {
  id: ID!
  category: Category
  title: String
  description: String
  cookingTime: Int
  difficulty: Difficulty
  ingredients: [String!]
  method: [String!]
  notes: [String!]
  tags: [String!]
}

input PublishRecipeInput {
  recipeId: ID!
}

input UnpublishRecipeInput {
  recipeId: ID!
}

input CommentRecipeInput {
  recipeId: ID!
  content: String!
}

input EditCommentInput {
  recipeId: ID!
  commentId: ID!
  content: String!
}

input DeleteCommentInput {
  recipeId: ID!
  commentId: ID!
}

input LikeRecipeInput {
  recipeId: ID!
}

input UnlikeRecipeInput {
  recipeId: ID!
}

input RateRecipeInput {
  recipeId: ID!
  grade: Int!
}

input DeleteRecipeInput {
  recipeId: ID!
}

# Root Query and Mutation types to extend from

type Query
type Mutation
