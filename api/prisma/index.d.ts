// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  recipe: (where?: RecipeWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  recipe: (where: RecipeWhereUniqueInput) => RecipeNullablePromise;
  recipes: (args?: {
    where?: RecipeWhereInput;
    orderBy?: RecipeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Recipe>;
  recipesConnection: (args?: {
    where?: RecipeWhereInput;
    orderBy?: RecipeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => RecipeConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createRecipe: (data: RecipeCreateInput) => RecipePromise;
  updateRecipe: (args: {
    data: RecipeUpdateInput;
    where: RecipeWhereUniqueInput;
  }) => RecipePromise;
  updateManyRecipes: (args: {
    data: RecipeUpdateManyMutationInput;
    where?: RecipeWhereInput;
  }) => BatchPayloadPromise;
  upsertRecipe: (args: {
    where: RecipeWhereUniqueInput;
    create: RecipeCreateInput;
    update: RecipeUpdateInput;
  }) => RecipePromise;
  deleteRecipe: (where: RecipeWhereUniqueInput) => RecipePromise;
  deleteManyRecipes: (where?: RecipeWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  recipe: (
    where?: RecipeSubscriptionWhereInput
  ) => RecipeSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type Role = "ADMIN" | "MODERATOR" | "USER";

export type Category = "BREAKFAST" | "SALAD" | "SOUP" | "MAIN" | "DESSERT";

export type Difficulty = "EASY" | "INTERMEDIATE" | "HARD";

export type RecipeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "category_ASC"
  | "category_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC"
  | "cookingTime_ASC"
  | "cookingTime_DESC"
  | "difficulty_ASC"
  | "difficulty_DESC"
  | "source_ASC"
  | "source_DESC"
  | "photo_ASC"
  | "photo_DESC"
  | "created_ASC"
  | "created_DESC"
  | "updated_ASC"
  | "updated_DESC"
  | "published_ASC"
  | "published_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "username_ASC"
  | "username_DESC"
  | "passwordHash_ASC"
  | "passwordHash_DESC"
  | "role_ASC"
  | "role_DESC"
  | "registered_ASC"
  | "registered_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type RecipeWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface RecipeWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  author?: Maybe<UserWhereInput>;
  category?: Maybe<Category>;
  category_not?: Maybe<Category>;
  category_in?: Maybe<Category[] | Category>;
  category_not_in?: Maybe<Category[] | Category>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  cookingTime?: Maybe<Int>;
  cookingTime_not?: Maybe<Int>;
  cookingTime_in?: Maybe<Int[] | Int>;
  cookingTime_not_in?: Maybe<Int[] | Int>;
  cookingTime_lt?: Maybe<Int>;
  cookingTime_lte?: Maybe<Int>;
  cookingTime_gt?: Maybe<Int>;
  cookingTime_gte?: Maybe<Int>;
  difficulty?: Maybe<Difficulty>;
  difficulty_not?: Maybe<Difficulty>;
  difficulty_in?: Maybe<Difficulty[] | Difficulty>;
  difficulty_not_in?: Maybe<Difficulty[] | Difficulty>;
  source?: Maybe<String>;
  source_not?: Maybe<String>;
  source_in?: Maybe<String[] | String>;
  source_not_in?: Maybe<String[] | String>;
  source_lt?: Maybe<String>;
  source_lte?: Maybe<String>;
  source_gt?: Maybe<String>;
  source_gte?: Maybe<String>;
  source_contains?: Maybe<String>;
  source_not_contains?: Maybe<String>;
  source_starts_with?: Maybe<String>;
  source_not_starts_with?: Maybe<String>;
  source_ends_with?: Maybe<String>;
  source_not_ends_with?: Maybe<String>;
  photo?: Maybe<String>;
  photo_not?: Maybe<String>;
  photo_in?: Maybe<String[] | String>;
  photo_not_in?: Maybe<String[] | String>;
  photo_lt?: Maybe<String>;
  photo_lte?: Maybe<String>;
  photo_gt?: Maybe<String>;
  photo_gte?: Maybe<String>;
  photo_contains?: Maybe<String>;
  photo_not_contains?: Maybe<String>;
  photo_starts_with?: Maybe<String>;
  photo_not_starts_with?: Maybe<String>;
  photo_ends_with?: Maybe<String>;
  photo_not_ends_with?: Maybe<String>;
  created?: Maybe<DateTimeInput>;
  created_not?: Maybe<DateTimeInput>;
  created_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  created_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  created_lt?: Maybe<DateTimeInput>;
  created_lte?: Maybe<DateTimeInput>;
  created_gt?: Maybe<DateTimeInput>;
  created_gte?: Maybe<DateTimeInput>;
  updated?: Maybe<DateTimeInput>;
  updated_not?: Maybe<DateTimeInput>;
  updated_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updated_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updated_lt?: Maybe<DateTimeInput>;
  updated_lte?: Maybe<DateTimeInput>;
  updated_gt?: Maybe<DateTimeInput>;
  updated_gte?: Maybe<DateTimeInput>;
  published?: Maybe<Boolean>;
  published_not?: Maybe<Boolean>;
  likedBy_some?: Maybe<UserWhereInput>;
  ratings_some?: Maybe<GradeWhereInput>;
  ratings_every?: Maybe<GradeRestrictedWhereInput>;
  ratings_none?: Maybe<GradeRestrictedWhereInput>;
  comments_some?: Maybe<CommentWhereInput>;
  comments_every?: Maybe<CommentRestrictedWhereInput>;
  comments_none?: Maybe<CommentRestrictedWhereInput>;
  AND?: Maybe<RecipeWhereInput[] | RecipeWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  username?: Maybe<String>;
  username_not?: Maybe<String>;
  username_in?: Maybe<String[] | String>;
  username_not_in?: Maybe<String[] | String>;
  username_lt?: Maybe<String>;
  username_lte?: Maybe<String>;
  username_gt?: Maybe<String>;
  username_gte?: Maybe<String>;
  username_contains?: Maybe<String>;
  username_not_contains?: Maybe<String>;
  username_starts_with?: Maybe<String>;
  username_not_starts_with?: Maybe<String>;
  username_ends_with?: Maybe<String>;
  username_not_ends_with?: Maybe<String>;
  passwordHash?: Maybe<String>;
  passwordHash_not?: Maybe<String>;
  passwordHash_in?: Maybe<String[] | String>;
  passwordHash_not_in?: Maybe<String[] | String>;
  passwordHash_lt?: Maybe<String>;
  passwordHash_lte?: Maybe<String>;
  passwordHash_gt?: Maybe<String>;
  passwordHash_gte?: Maybe<String>;
  passwordHash_contains?: Maybe<String>;
  passwordHash_not_contains?: Maybe<String>;
  passwordHash_starts_with?: Maybe<String>;
  passwordHash_not_starts_with?: Maybe<String>;
  passwordHash_ends_with?: Maybe<String>;
  passwordHash_not_ends_with?: Maybe<String>;
  role?: Maybe<Role>;
  role_not?: Maybe<Role>;
  role_in?: Maybe<Role[] | Role>;
  role_not_in?: Maybe<Role[] | Role>;
  registered?: Maybe<DateTimeInput>;
  registered_not?: Maybe<DateTimeInput>;
  registered_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  registered_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  registered_lt?: Maybe<DateTimeInput>;
  registered_lte?: Maybe<DateTimeInput>;
  registered_gt?: Maybe<DateTimeInput>;
  registered_gte?: Maybe<DateTimeInput>;
  recipes_some?: Maybe<RecipeWhereInput>;
  likedRecipes_some?: Maybe<RecipeWhereInput>;
  following_some?: Maybe<UserWhereInput>;
  followers_some?: Maybe<UserWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface GradeWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  rater?: Maybe<UserWhereInput>;
  grade?: Maybe<Int>;
  grade_not?: Maybe<Int>;
  grade_in?: Maybe<Int[] | Int>;
  grade_not_in?: Maybe<Int[] | Int>;
  grade_lt?: Maybe<Int>;
  grade_lte?: Maybe<Int>;
  grade_gt?: Maybe<Int>;
  grade_gte?: Maybe<Int>;
  AND?: Maybe<GradeWhereInput[] | GradeWhereInput>;
}

export interface GradeRestrictedWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  grade?: Maybe<Int>;
  grade_not?: Maybe<Int>;
  grade_in?: Maybe<Int[] | Int>;
  grade_not_in?: Maybe<Int[] | Int>;
  grade_lt?: Maybe<Int>;
  grade_lte?: Maybe<Int>;
  grade_gt?: Maybe<Int>;
  grade_gte?: Maybe<Int>;
  AND?: Maybe<GradeRestrictedWhereInput[] | GradeRestrictedWhereInput>;
}

export interface CommentWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  author?: Maybe<UserWhereInput>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  created?: Maybe<DateTimeInput>;
  created_not?: Maybe<DateTimeInput>;
  created_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  created_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  created_lt?: Maybe<DateTimeInput>;
  created_lte?: Maybe<DateTimeInput>;
  created_gt?: Maybe<DateTimeInput>;
  created_gte?: Maybe<DateTimeInput>;
  updated?: Maybe<DateTimeInput>;
  updated_not?: Maybe<DateTimeInput>;
  updated_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updated_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updated_lt?: Maybe<DateTimeInput>;
  updated_lte?: Maybe<DateTimeInput>;
  updated_gt?: Maybe<DateTimeInput>;
  updated_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CommentWhereInput[] | CommentWhereInput>;
}

export interface CommentRestrictedWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  created?: Maybe<DateTimeInput>;
  created_not?: Maybe<DateTimeInput>;
  created_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  created_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  created_lt?: Maybe<DateTimeInput>;
  created_lte?: Maybe<DateTimeInput>;
  created_gt?: Maybe<DateTimeInput>;
  created_gte?: Maybe<DateTimeInput>;
  updated?: Maybe<DateTimeInput>;
  updated_not?: Maybe<DateTimeInput>;
  updated_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updated_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updated_lt?: Maybe<DateTimeInput>;
  updated_lte?: Maybe<DateTimeInput>;
  updated_gt?: Maybe<DateTimeInput>;
  updated_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CommentRestrictedWhereInput[] | CommentRestrictedWhereInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
  username?: Maybe<String>;
}>;

export interface RecipeCreateInput {
  id?: Maybe<ID_Input>;
  author: UserCreateOneWithoutRecipesInput;
  category: Category;
  title: String;
  description: String;
  cookingTime: Int;
  difficulty: Difficulty;
  ingredients?: Maybe<RecipeCreateingredientsInput>;
  method?: Maybe<RecipeCreatemethodInput>;
  notes?: Maybe<RecipeCreatenotesInput>;
  tags?: Maybe<RecipeCreatetagsInput>;
  source?: Maybe<String>;
  photo?: Maybe<String>;
  published?: Maybe<Boolean>;
  likedBy?: Maybe<UserCreateManyWithoutLikedRecipesInput>;
  ratings?: Maybe<GradeCreateManyInput>;
  comments?: Maybe<CommentCreateManyInput>;
}

export interface UserCreateOneWithoutRecipesInput {
  create?: Maybe<UserCreateWithoutRecipesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutRecipesInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  username: String;
  passwordHash: String;
  role?: Maybe<Role>;
  likedRecipes?: Maybe<RecipeCreateManyWithoutLikedByInput>;
  following?: Maybe<UserCreateManyWithoutFollowersInput>;
  followers?: Maybe<UserCreateManyWithoutFollowingInput>;
}

export interface RecipeCreateManyWithoutLikedByInput {
  create?: Maybe<
    RecipeCreateWithoutLikedByInput[] | RecipeCreateWithoutLikedByInput
  >;
  connect?: Maybe<RecipeWhereUniqueInput[] | RecipeWhereUniqueInput>;
}

export interface RecipeCreateWithoutLikedByInput {
  id?: Maybe<ID_Input>;
  author: UserCreateOneWithoutRecipesInput;
  category: Category;
  title: String;
  description: String;
  cookingTime: Int;
  difficulty: Difficulty;
  ingredients?: Maybe<RecipeCreateingredientsInput>;
  method?: Maybe<RecipeCreatemethodInput>;
  notes?: Maybe<RecipeCreatenotesInput>;
  tags?: Maybe<RecipeCreatetagsInput>;
  source?: Maybe<String>;
  photo?: Maybe<String>;
  published?: Maybe<Boolean>;
  ratings?: Maybe<GradeCreateManyInput>;
  comments?: Maybe<CommentCreateManyInput>;
}

export interface RecipeCreateingredientsInput {
  set?: Maybe<String[] | String>;
}

export interface RecipeCreatemethodInput {
  set?: Maybe<String[] | String>;
}

export interface RecipeCreatenotesInput {
  set?: Maybe<String[] | String>;
}

export interface RecipeCreatetagsInput {
  set?: Maybe<String[] | String>;
}

export interface GradeCreateManyInput {
  create?: Maybe<GradeCreateInput[] | GradeCreateInput>;
}

export interface GradeCreateInput {
  id?: Maybe<ID_Input>;
  rater: UserCreateOneInput;
  grade: Int;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  username: String;
  passwordHash: String;
  role?: Maybe<Role>;
  recipes?: Maybe<RecipeCreateManyWithoutAuthorInput>;
  likedRecipes?: Maybe<RecipeCreateManyWithoutLikedByInput>;
  following?: Maybe<UserCreateManyWithoutFollowersInput>;
  followers?: Maybe<UserCreateManyWithoutFollowingInput>;
}

export interface RecipeCreateManyWithoutAuthorInput {
  create?: Maybe<
    RecipeCreateWithoutAuthorInput[] | RecipeCreateWithoutAuthorInput
  >;
  connect?: Maybe<RecipeWhereUniqueInput[] | RecipeWhereUniqueInput>;
}

export interface RecipeCreateWithoutAuthorInput {
  id?: Maybe<ID_Input>;
  category: Category;
  title: String;
  description: String;
  cookingTime: Int;
  difficulty: Difficulty;
  ingredients?: Maybe<RecipeCreateingredientsInput>;
  method?: Maybe<RecipeCreatemethodInput>;
  notes?: Maybe<RecipeCreatenotesInput>;
  tags?: Maybe<RecipeCreatetagsInput>;
  source?: Maybe<String>;
  photo?: Maybe<String>;
  published?: Maybe<Boolean>;
  likedBy?: Maybe<UserCreateManyWithoutLikedRecipesInput>;
  ratings?: Maybe<GradeCreateManyInput>;
  comments?: Maybe<CommentCreateManyInput>;
}

export interface UserCreateManyWithoutLikedRecipesInput {
  create?: Maybe<
    UserCreateWithoutLikedRecipesInput[] | UserCreateWithoutLikedRecipesInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateWithoutLikedRecipesInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  username: String;
  passwordHash: String;
  role?: Maybe<Role>;
  recipes?: Maybe<RecipeCreateManyWithoutAuthorInput>;
  following?: Maybe<UserCreateManyWithoutFollowersInput>;
  followers?: Maybe<UserCreateManyWithoutFollowingInput>;
}

export interface UserCreateManyWithoutFollowersInput {
  create?: Maybe<
    UserCreateWithoutFollowersInput[] | UserCreateWithoutFollowersInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateWithoutFollowersInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  username: String;
  passwordHash: String;
  role?: Maybe<Role>;
  recipes?: Maybe<RecipeCreateManyWithoutAuthorInput>;
  likedRecipes?: Maybe<RecipeCreateManyWithoutLikedByInput>;
  following?: Maybe<UserCreateManyWithoutFollowersInput>;
}

export interface UserCreateManyWithoutFollowingInput {
  create?: Maybe<
    UserCreateWithoutFollowingInput[] | UserCreateWithoutFollowingInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateWithoutFollowingInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  username: String;
  passwordHash: String;
  role?: Maybe<Role>;
  recipes?: Maybe<RecipeCreateManyWithoutAuthorInput>;
  likedRecipes?: Maybe<RecipeCreateManyWithoutLikedByInput>;
  followers?: Maybe<UserCreateManyWithoutFollowingInput>;
}

export interface CommentCreateManyInput {
  create?: Maybe<CommentCreateInput[] | CommentCreateInput>;
}

export interface CommentCreateInput {
  id?: Maybe<ID_Input>;
  author: UserCreateOneInput;
  content: String;
}

export interface RecipeUpdateInput {
  author?: Maybe<UserUpdateOneRequiredWithoutRecipesInput>;
  category?: Maybe<Category>;
  title?: Maybe<String>;
  description?: Maybe<String>;
  cookingTime?: Maybe<Int>;
  difficulty?: Maybe<Difficulty>;
  ingredients?: Maybe<RecipeUpdateingredientsInput>;
  method?: Maybe<RecipeUpdatemethodInput>;
  notes?: Maybe<RecipeUpdatenotesInput>;
  tags?: Maybe<RecipeUpdatetagsInput>;
  source?: Maybe<String>;
  photo?: Maybe<String>;
  published?: Maybe<Boolean>;
  likedBy?: Maybe<UserUpdateManyWithoutLikedRecipesInput>;
  ratings?: Maybe<GradeUpdateManyInput>;
  comments?: Maybe<CommentUpdateManyInput>;
}

export interface UserUpdateOneRequiredWithoutRecipesInput {
  create?: Maybe<UserCreateWithoutRecipesInput>;
  update?: Maybe<UserUpdateWithoutRecipesDataInput>;
  upsert?: Maybe<UserUpsertWithoutRecipesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutRecipesDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  username?: Maybe<String>;
  passwordHash?: Maybe<String>;
  role?: Maybe<Role>;
  likedRecipes?: Maybe<RecipeUpdateManyWithoutLikedByInput>;
  following?: Maybe<UserUpdateManyWithoutFollowersInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowingInput>;
}

export interface RecipeUpdateManyWithoutLikedByInput {
  create?: Maybe<
    RecipeCreateWithoutLikedByInput[] | RecipeCreateWithoutLikedByInput
  >;
  delete?: Maybe<RecipeWhereUniqueInput[] | RecipeWhereUniqueInput>;
  connect?: Maybe<RecipeWhereUniqueInput[] | RecipeWhereUniqueInput>;
  set?: Maybe<RecipeWhereUniqueInput[] | RecipeWhereUniqueInput>;
  disconnect?: Maybe<RecipeWhereUniqueInput[] | RecipeWhereUniqueInput>;
  update?: Maybe<
    | RecipeUpdateWithWhereUniqueWithoutLikedByInput[]
    | RecipeUpdateWithWhereUniqueWithoutLikedByInput
  >;
  upsert?: Maybe<
    | RecipeUpsertWithWhereUniqueWithoutLikedByInput[]
    | RecipeUpsertWithWhereUniqueWithoutLikedByInput
  >;
  deleteMany?: Maybe<RecipeScalarWhereInput[] | RecipeScalarWhereInput>;
  updateMany?: Maybe<
    | RecipeUpdateManyWithWhereNestedInput[]
    | RecipeUpdateManyWithWhereNestedInput
  >;
}

export interface RecipeUpdateWithWhereUniqueWithoutLikedByInput {
  where: RecipeWhereUniqueInput;
  data: RecipeUpdateWithoutLikedByDataInput;
}

export interface RecipeUpdateWithoutLikedByDataInput {
  author?: Maybe<UserUpdateOneRequiredWithoutRecipesInput>;
  category?: Maybe<Category>;
  title?: Maybe<String>;
  description?: Maybe<String>;
  cookingTime?: Maybe<Int>;
  difficulty?: Maybe<Difficulty>;
  ingredients?: Maybe<RecipeUpdateingredientsInput>;
  method?: Maybe<RecipeUpdatemethodInput>;
  notes?: Maybe<RecipeUpdatenotesInput>;
  tags?: Maybe<RecipeUpdatetagsInput>;
  source?: Maybe<String>;
  photo?: Maybe<String>;
  published?: Maybe<Boolean>;
  ratings?: Maybe<GradeUpdateManyInput>;
  comments?: Maybe<CommentUpdateManyInput>;
}

export interface RecipeUpdateingredientsInput {
  set?: Maybe<String[] | String>;
}

export interface RecipeUpdatemethodInput {
  set?: Maybe<String[] | String>;
}

export interface RecipeUpdatenotesInput {
  set?: Maybe<String[] | String>;
}

export interface RecipeUpdatetagsInput {
  set?: Maybe<String[] | String>;
}

export interface GradeUpdateManyInput {
  create?: Maybe<GradeCreateInput[] | GradeCreateInput>;
  update?: Maybe<
    | GradeUpdateWithWhereUniqueNestedInput[]
    | GradeUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | GradeUpsertWithWhereUniqueNestedInput[]
    | GradeUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<GradeWhereUniqueInput[] | GradeWhereUniqueInput>;
  deleteMany?: Maybe<GradeScalarWhereInput[] | GradeScalarWhereInput>;
  updateMany?: Maybe<
    GradeUpdateManyWithWhereNestedInput[] | GradeUpdateManyWithWhereNestedInput
  >;
}

export interface GradeUpdateWithWhereUniqueNestedInput {
  where: GradeWhereUniqueInput;
  data: GradeUpdateDataInput;
}

export type GradeWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface GradeUpdateDataInput {
  rater?: Maybe<UserUpdateOneRequiredInput>;
  grade?: Maybe<Int>;
}

export interface UserUpdateOneRequiredInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  username?: Maybe<String>;
  passwordHash?: Maybe<String>;
  role?: Maybe<Role>;
  recipes?: Maybe<RecipeUpdateManyWithoutAuthorInput>;
  likedRecipes?: Maybe<RecipeUpdateManyWithoutLikedByInput>;
  following?: Maybe<UserUpdateManyWithoutFollowersInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowingInput>;
}

export interface RecipeUpdateManyWithoutAuthorInput {
  create?: Maybe<
    RecipeCreateWithoutAuthorInput[] | RecipeCreateWithoutAuthorInput
  >;
  delete?: Maybe<RecipeWhereUniqueInput[] | RecipeWhereUniqueInput>;
  connect?: Maybe<RecipeWhereUniqueInput[] | RecipeWhereUniqueInput>;
  set?: Maybe<RecipeWhereUniqueInput[] | RecipeWhereUniqueInput>;
  disconnect?: Maybe<RecipeWhereUniqueInput[] | RecipeWhereUniqueInput>;
  update?: Maybe<
    | RecipeUpdateWithWhereUniqueWithoutAuthorInput[]
    | RecipeUpdateWithWhereUniqueWithoutAuthorInput
  >;
  upsert?: Maybe<
    | RecipeUpsertWithWhereUniqueWithoutAuthorInput[]
    | RecipeUpsertWithWhereUniqueWithoutAuthorInput
  >;
  deleteMany?: Maybe<RecipeScalarWhereInput[] | RecipeScalarWhereInput>;
  updateMany?: Maybe<
    | RecipeUpdateManyWithWhereNestedInput[]
    | RecipeUpdateManyWithWhereNestedInput
  >;
}

export interface RecipeUpdateWithWhereUniqueWithoutAuthorInput {
  where: RecipeWhereUniqueInput;
  data: RecipeUpdateWithoutAuthorDataInput;
}

export interface RecipeUpdateWithoutAuthorDataInput {
  category?: Maybe<Category>;
  title?: Maybe<String>;
  description?: Maybe<String>;
  cookingTime?: Maybe<Int>;
  difficulty?: Maybe<Difficulty>;
  ingredients?: Maybe<RecipeUpdateingredientsInput>;
  method?: Maybe<RecipeUpdatemethodInput>;
  notes?: Maybe<RecipeUpdatenotesInput>;
  tags?: Maybe<RecipeUpdatetagsInput>;
  source?: Maybe<String>;
  photo?: Maybe<String>;
  published?: Maybe<Boolean>;
  likedBy?: Maybe<UserUpdateManyWithoutLikedRecipesInput>;
  ratings?: Maybe<GradeUpdateManyInput>;
  comments?: Maybe<CommentUpdateManyInput>;
}

export interface UserUpdateManyWithoutLikedRecipesInput {
  create?: Maybe<
    UserCreateWithoutLikedRecipesInput[] | UserCreateWithoutLikedRecipesInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutLikedRecipesInput[]
    | UserUpdateWithWhereUniqueWithoutLikedRecipesInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutLikedRecipesInput[]
    | UserUpsertWithWhereUniqueWithoutLikedRecipesInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueWithoutLikedRecipesInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutLikedRecipesDataInput;
}

export interface UserUpdateWithoutLikedRecipesDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  username?: Maybe<String>;
  passwordHash?: Maybe<String>;
  role?: Maybe<Role>;
  recipes?: Maybe<RecipeUpdateManyWithoutAuthorInput>;
  following?: Maybe<UserUpdateManyWithoutFollowersInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowingInput>;
}

export interface UserUpdateManyWithoutFollowersInput {
  create?: Maybe<
    UserCreateWithoutFollowersInput[] | UserCreateWithoutFollowersInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutFollowersInput[]
    | UserUpdateWithWhereUniqueWithoutFollowersInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutFollowersInput[]
    | UserUpsertWithWhereUniqueWithoutFollowersInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueWithoutFollowersInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutFollowersDataInput;
}

export interface UserUpdateWithoutFollowersDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  username?: Maybe<String>;
  passwordHash?: Maybe<String>;
  role?: Maybe<Role>;
  recipes?: Maybe<RecipeUpdateManyWithoutAuthorInput>;
  likedRecipes?: Maybe<RecipeUpdateManyWithoutLikedByInput>;
  following?: Maybe<UserUpdateManyWithoutFollowersInput>;
}

export interface UserUpsertWithWhereUniqueWithoutFollowersInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutFollowersDataInput;
  create: UserCreateWithoutFollowersInput;
}

export interface UserScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  username?: Maybe<String>;
  username_not?: Maybe<String>;
  username_in?: Maybe<String[] | String>;
  username_not_in?: Maybe<String[] | String>;
  username_lt?: Maybe<String>;
  username_lte?: Maybe<String>;
  username_gt?: Maybe<String>;
  username_gte?: Maybe<String>;
  username_contains?: Maybe<String>;
  username_not_contains?: Maybe<String>;
  username_starts_with?: Maybe<String>;
  username_not_starts_with?: Maybe<String>;
  username_ends_with?: Maybe<String>;
  username_not_ends_with?: Maybe<String>;
  passwordHash?: Maybe<String>;
  passwordHash_not?: Maybe<String>;
  passwordHash_in?: Maybe<String[] | String>;
  passwordHash_not_in?: Maybe<String[] | String>;
  passwordHash_lt?: Maybe<String>;
  passwordHash_lte?: Maybe<String>;
  passwordHash_gt?: Maybe<String>;
  passwordHash_gte?: Maybe<String>;
  passwordHash_contains?: Maybe<String>;
  passwordHash_not_contains?: Maybe<String>;
  passwordHash_starts_with?: Maybe<String>;
  passwordHash_not_starts_with?: Maybe<String>;
  passwordHash_ends_with?: Maybe<String>;
  passwordHash_not_ends_with?: Maybe<String>;
  role?: Maybe<Role>;
  role_not?: Maybe<Role>;
  role_in?: Maybe<Role[] | Role>;
  role_not_in?: Maybe<Role[] | Role>;
  registered?: Maybe<DateTimeInput>;
  registered_not?: Maybe<DateTimeInput>;
  registered_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  registered_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  registered_lt?: Maybe<DateTimeInput>;
  registered_lte?: Maybe<DateTimeInput>;
  registered_gt?: Maybe<DateTimeInput>;
  registered_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  OR?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  NOT?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface UserUpdateManyDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  username?: Maybe<String>;
  passwordHash?: Maybe<String>;
  role?: Maybe<Role>;
}

export interface UserUpdateManyWithoutFollowingInput {
  create?: Maybe<
    UserCreateWithoutFollowingInput[] | UserCreateWithoutFollowingInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutFollowingInput[]
    | UserUpdateWithWhereUniqueWithoutFollowingInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutFollowingInput[]
    | UserUpsertWithWhereUniqueWithoutFollowingInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueWithoutFollowingInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutFollowingDataInput;
}

export interface UserUpdateWithoutFollowingDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  username?: Maybe<String>;
  passwordHash?: Maybe<String>;
  role?: Maybe<Role>;
  recipes?: Maybe<RecipeUpdateManyWithoutAuthorInput>;
  likedRecipes?: Maybe<RecipeUpdateManyWithoutLikedByInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowingInput>;
}

export interface UserUpsertWithWhereUniqueWithoutFollowingInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutFollowingDataInput;
  create: UserCreateWithoutFollowingInput;
}

export interface UserUpsertWithWhereUniqueWithoutLikedRecipesInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutLikedRecipesDataInput;
  create: UserCreateWithoutLikedRecipesInput;
}

export interface CommentUpdateManyInput {
  create?: Maybe<CommentCreateInput[] | CommentCreateInput>;
  update?: Maybe<
    | CommentUpdateWithWhereUniqueNestedInput[]
    | CommentUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | CommentUpsertWithWhereUniqueNestedInput[]
    | CommentUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  deleteMany?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  updateMany?: Maybe<
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput
  >;
}

export interface CommentUpdateWithWhereUniqueNestedInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateDataInput;
}

export type CommentWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface CommentUpdateDataInput {
  author?: Maybe<UserUpdateOneRequiredInput>;
  content?: Maybe<String>;
}

export interface CommentUpsertWithWhereUniqueNestedInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateDataInput;
  create: CommentCreateInput;
}

export interface CommentScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  created?: Maybe<DateTimeInput>;
  created_not?: Maybe<DateTimeInput>;
  created_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  created_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  created_lt?: Maybe<DateTimeInput>;
  created_lte?: Maybe<DateTimeInput>;
  created_gt?: Maybe<DateTimeInput>;
  created_gte?: Maybe<DateTimeInput>;
  updated?: Maybe<DateTimeInput>;
  updated_not?: Maybe<DateTimeInput>;
  updated_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updated_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updated_lt?: Maybe<DateTimeInput>;
  updated_lte?: Maybe<DateTimeInput>;
  updated_gt?: Maybe<DateTimeInput>;
  updated_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  OR?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  NOT?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
}

export interface CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput;
  data: CommentUpdateManyDataInput;
}

export interface CommentUpdateManyDataInput {
  content?: Maybe<String>;
}

export interface RecipeUpsertWithWhereUniqueWithoutAuthorInput {
  where: RecipeWhereUniqueInput;
  update: RecipeUpdateWithoutAuthorDataInput;
  create: RecipeCreateWithoutAuthorInput;
}

export interface RecipeScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  category?: Maybe<Category>;
  category_not?: Maybe<Category>;
  category_in?: Maybe<Category[] | Category>;
  category_not_in?: Maybe<Category[] | Category>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  cookingTime?: Maybe<Int>;
  cookingTime_not?: Maybe<Int>;
  cookingTime_in?: Maybe<Int[] | Int>;
  cookingTime_not_in?: Maybe<Int[] | Int>;
  cookingTime_lt?: Maybe<Int>;
  cookingTime_lte?: Maybe<Int>;
  cookingTime_gt?: Maybe<Int>;
  cookingTime_gte?: Maybe<Int>;
  difficulty?: Maybe<Difficulty>;
  difficulty_not?: Maybe<Difficulty>;
  difficulty_in?: Maybe<Difficulty[] | Difficulty>;
  difficulty_not_in?: Maybe<Difficulty[] | Difficulty>;
  source?: Maybe<String>;
  source_not?: Maybe<String>;
  source_in?: Maybe<String[] | String>;
  source_not_in?: Maybe<String[] | String>;
  source_lt?: Maybe<String>;
  source_lte?: Maybe<String>;
  source_gt?: Maybe<String>;
  source_gte?: Maybe<String>;
  source_contains?: Maybe<String>;
  source_not_contains?: Maybe<String>;
  source_starts_with?: Maybe<String>;
  source_not_starts_with?: Maybe<String>;
  source_ends_with?: Maybe<String>;
  source_not_ends_with?: Maybe<String>;
  photo?: Maybe<String>;
  photo_not?: Maybe<String>;
  photo_in?: Maybe<String[] | String>;
  photo_not_in?: Maybe<String[] | String>;
  photo_lt?: Maybe<String>;
  photo_lte?: Maybe<String>;
  photo_gt?: Maybe<String>;
  photo_gte?: Maybe<String>;
  photo_contains?: Maybe<String>;
  photo_not_contains?: Maybe<String>;
  photo_starts_with?: Maybe<String>;
  photo_not_starts_with?: Maybe<String>;
  photo_ends_with?: Maybe<String>;
  photo_not_ends_with?: Maybe<String>;
  created?: Maybe<DateTimeInput>;
  created_not?: Maybe<DateTimeInput>;
  created_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  created_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  created_lt?: Maybe<DateTimeInput>;
  created_lte?: Maybe<DateTimeInput>;
  created_gt?: Maybe<DateTimeInput>;
  created_gte?: Maybe<DateTimeInput>;
  updated?: Maybe<DateTimeInput>;
  updated_not?: Maybe<DateTimeInput>;
  updated_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updated_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updated_lt?: Maybe<DateTimeInput>;
  updated_lte?: Maybe<DateTimeInput>;
  updated_gt?: Maybe<DateTimeInput>;
  updated_gte?: Maybe<DateTimeInput>;
  published?: Maybe<Boolean>;
  published_not?: Maybe<Boolean>;
  AND?: Maybe<RecipeScalarWhereInput[] | RecipeScalarWhereInput>;
  OR?: Maybe<RecipeScalarWhereInput[] | RecipeScalarWhereInput>;
  NOT?: Maybe<RecipeScalarWhereInput[] | RecipeScalarWhereInput>;
}

export interface RecipeUpdateManyWithWhereNestedInput {
  where: RecipeScalarWhereInput;
  data: RecipeUpdateManyDataInput;
}

export interface RecipeUpdateManyDataInput {
  category?: Maybe<Category>;
  title?: Maybe<String>;
  description?: Maybe<String>;
  cookingTime?: Maybe<Int>;
  difficulty?: Maybe<Difficulty>;
  ingredients?: Maybe<RecipeUpdateingredientsInput>;
  method?: Maybe<RecipeUpdatemethodInput>;
  notes?: Maybe<RecipeUpdatenotesInput>;
  tags?: Maybe<RecipeUpdatetagsInput>;
  source?: Maybe<String>;
  photo?: Maybe<String>;
  published?: Maybe<Boolean>;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface GradeUpsertWithWhereUniqueNestedInput {
  where: GradeWhereUniqueInput;
  update: GradeUpdateDataInput;
  create: GradeCreateInput;
}

export interface GradeScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  grade?: Maybe<Int>;
  grade_not?: Maybe<Int>;
  grade_in?: Maybe<Int[] | Int>;
  grade_not_in?: Maybe<Int[] | Int>;
  grade_lt?: Maybe<Int>;
  grade_lte?: Maybe<Int>;
  grade_gt?: Maybe<Int>;
  grade_gte?: Maybe<Int>;
  AND?: Maybe<GradeScalarWhereInput[] | GradeScalarWhereInput>;
  OR?: Maybe<GradeScalarWhereInput[] | GradeScalarWhereInput>;
  NOT?: Maybe<GradeScalarWhereInput[] | GradeScalarWhereInput>;
}

export interface GradeUpdateManyWithWhereNestedInput {
  where: GradeScalarWhereInput;
  data: GradeUpdateManyDataInput;
}

export interface GradeUpdateManyDataInput {
  grade?: Maybe<Int>;
}

export interface RecipeUpsertWithWhereUniqueWithoutLikedByInput {
  where: RecipeWhereUniqueInput;
  update: RecipeUpdateWithoutLikedByDataInput;
  create: RecipeCreateWithoutLikedByInput;
}

export interface UserUpsertWithoutRecipesInput {
  update: UserUpdateWithoutRecipesDataInput;
  create: UserCreateWithoutRecipesInput;
}

export interface RecipeUpdateManyMutationInput {
  category?: Maybe<Category>;
  title?: Maybe<String>;
  description?: Maybe<String>;
  cookingTime?: Maybe<Int>;
  difficulty?: Maybe<Difficulty>;
  ingredients?: Maybe<RecipeUpdateingredientsInput>;
  method?: Maybe<RecipeUpdatemethodInput>;
  notes?: Maybe<RecipeUpdatenotesInput>;
  tags?: Maybe<RecipeUpdatetagsInput>;
  source?: Maybe<String>;
  photo?: Maybe<String>;
  published?: Maybe<Boolean>;
}

export interface UserUpdateInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  username?: Maybe<String>;
  passwordHash?: Maybe<String>;
  role?: Maybe<Role>;
  recipes?: Maybe<RecipeUpdateManyWithoutAuthorInput>;
  likedRecipes?: Maybe<RecipeUpdateManyWithoutLikedByInput>;
  following?: Maybe<UserUpdateManyWithoutFollowersInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowingInput>;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  username?: Maybe<String>;
  passwordHash?: Maybe<String>;
  role?: Maybe<Role>;
}

export interface RecipeSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<RecipeWhereInput>;
  AND?: Maybe<RecipeSubscriptionWhereInput[] | RecipeSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Recipe {
  id: ID_Output;
  category: Category;
  title: String;
  description: String;
  cookingTime: Int;
  difficulty: Difficulty;
  ingredients: String[];
  method: String[];
  notes: String[];
  tags: String[];
  source?: String;
  photo?: String;
  created: DateTimeOutput;
  updated: DateTimeOutput;
  published: Boolean;
  ratings?: <T = FragmentableArray<Grade>>() => T;
  comments?: <T = FragmentableArray<Comment>>() => T;
}

export interface RecipePromise extends Promise<Recipe>, Fragmentable {
  id: () => Promise<ID_Output>;
  author: <T = UserPromise>() => T;
  category: () => Promise<Category>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  cookingTime: () => Promise<Int>;
  difficulty: () => Promise<Difficulty>;
  ingredients: () => Promise<String[]>;
  method: () => Promise<String[]>;
  notes: () => Promise<String[]>;
  tags: () => Promise<String[]>;
  source: () => Promise<String>;
  photo: () => Promise<String>;
  created: () => Promise<DateTimeOutput>;
  updated: () => Promise<DateTimeOutput>;
  published: () => Promise<Boolean>;
  likedBy: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  ratings: <T = FragmentableArray<Grade>>() => T;
  comments: <T = FragmentableArray<Comment>>() => T;
}

export interface RecipeSubscription
  extends Promise<AsyncIterator<Recipe>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  author: <T = UserSubscription>() => T;
  category: () => Promise<AsyncIterator<Category>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  cookingTime: () => Promise<AsyncIterator<Int>>;
  difficulty: () => Promise<AsyncIterator<Difficulty>>;
  ingredients: () => Promise<AsyncIterator<String[]>>;
  method: () => Promise<AsyncIterator<String[]>>;
  notes: () => Promise<AsyncIterator<String[]>>;
  tags: () => Promise<AsyncIterator<String[]>>;
  source: () => Promise<AsyncIterator<String>>;
  photo: () => Promise<AsyncIterator<String>>;
  created: () => Promise<AsyncIterator<DateTimeOutput>>;
  updated: () => Promise<AsyncIterator<DateTimeOutput>>;
  published: () => Promise<AsyncIterator<Boolean>>;
  likedBy: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  ratings: <T = Promise<AsyncIterator<GradeSubscription>>>() => T;
  comments: <T = Promise<AsyncIterator<CommentSubscription>>>() => T;
}

export interface RecipeNullablePromise
  extends Promise<Recipe | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  author: <T = UserPromise>() => T;
  category: () => Promise<Category>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  cookingTime: () => Promise<Int>;
  difficulty: () => Promise<Difficulty>;
  ingredients: () => Promise<String[]>;
  method: () => Promise<String[]>;
  notes: () => Promise<String[]>;
  tags: () => Promise<String[]>;
  source: () => Promise<String>;
  photo: () => Promise<String>;
  created: () => Promise<DateTimeOutput>;
  updated: () => Promise<DateTimeOutput>;
  published: () => Promise<Boolean>;
  likedBy: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  ratings: <T = FragmentableArray<Grade>>() => T;
  comments: <T = FragmentableArray<Comment>>() => T;
}

export interface User {
  id: ID_Output;
  name: String;
  email: String;
  username: String;
  passwordHash: String;
  role: Role;
  registered: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  username: () => Promise<String>;
  passwordHash: () => Promise<String>;
  role: () => Promise<Role>;
  registered: () => Promise<DateTimeOutput>;
  recipes: <T = FragmentableArray<Recipe>>(args?: {
    where?: RecipeWhereInput;
    orderBy?: RecipeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  likedRecipes: <T = FragmentableArray<Recipe>>(args?: {
    where?: RecipeWhereInput;
    orderBy?: RecipeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  following: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  followers: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
  passwordHash: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<Role>>;
  registered: () => Promise<AsyncIterator<DateTimeOutput>>;
  recipes: <T = Promise<AsyncIterator<RecipeSubscription>>>(args?: {
    where?: RecipeWhereInput;
    orderBy?: RecipeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  likedRecipes: <T = Promise<AsyncIterator<RecipeSubscription>>>(args?: {
    where?: RecipeWhereInput;
    orderBy?: RecipeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  following: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  followers: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  username: () => Promise<String>;
  passwordHash: () => Promise<String>;
  role: () => Promise<Role>;
  registered: () => Promise<DateTimeOutput>;
  recipes: <T = FragmentableArray<Recipe>>(args?: {
    where?: RecipeWhereInput;
    orderBy?: RecipeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  likedRecipes: <T = FragmentableArray<Recipe>>(args?: {
    where?: RecipeWhereInput;
    orderBy?: RecipeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  following: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  followers: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Grade {
  id: ID_Output;
  grade: Int;
}

export interface GradePromise extends Promise<Grade>, Fragmentable {
  id: () => Promise<ID_Output>;
  rater: <T = UserPromise>() => T;
  grade: () => Promise<Int>;
}

export interface GradeSubscription
  extends Promise<AsyncIterator<Grade>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  rater: <T = UserSubscription>() => T;
  grade: () => Promise<AsyncIterator<Int>>;
}

export interface GradeNullablePromise
  extends Promise<Grade | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  rater: <T = UserPromise>() => T;
  grade: () => Promise<Int>;
}

export interface Comment {
  id: ID_Output;
  content: String;
  created: DateTimeOutput;
  updated: DateTimeOutput;
}

export interface CommentPromise extends Promise<Comment>, Fragmentable {
  id: () => Promise<ID_Output>;
  author: <T = UserPromise>() => T;
  content: () => Promise<String>;
  created: () => Promise<DateTimeOutput>;
  updated: () => Promise<DateTimeOutput>;
}

export interface CommentSubscription
  extends Promise<AsyncIterator<Comment>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  author: <T = UserSubscription>() => T;
  content: () => Promise<AsyncIterator<String>>;
  created: () => Promise<AsyncIterator<DateTimeOutput>>;
  updated: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CommentNullablePromise
  extends Promise<Comment | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  author: <T = UserPromise>() => T;
  content: () => Promise<String>;
  created: () => Promise<DateTimeOutput>;
  updated: () => Promise<DateTimeOutput>;
}

export interface RecipeConnection {
  pageInfo: PageInfo;
  edges: RecipeEdge[];
}

export interface RecipeConnectionPromise
  extends Promise<RecipeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RecipeEdge>>() => T;
  aggregate: <T = AggregateRecipePromise>() => T;
}

export interface RecipeConnectionSubscription
  extends Promise<AsyncIterator<RecipeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RecipeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRecipeSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface RecipeEdge {
  node: Recipe;
  cursor: String;
}

export interface RecipeEdgePromise extends Promise<RecipeEdge>, Fragmentable {
  node: <T = RecipePromise>() => T;
  cursor: () => Promise<String>;
}

export interface RecipeEdgeSubscription
  extends Promise<AsyncIterator<RecipeEdge>>,
    Fragmentable {
  node: <T = RecipeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateRecipe {
  count: Int;
}

export interface AggregateRecipePromise
  extends Promise<AggregateRecipe>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRecipeSubscription
  extends Promise<AsyncIterator<AggregateRecipe>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface RecipeSubscriptionPayload {
  mutation: MutationType;
  node: Recipe;
  updatedFields: String[];
  previousValues: RecipePreviousValues;
}

export interface RecipeSubscriptionPayloadPromise
  extends Promise<RecipeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RecipePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RecipePreviousValuesPromise>() => T;
}

export interface RecipeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RecipeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RecipeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RecipePreviousValuesSubscription>() => T;
}

export interface RecipePreviousValues {
  id: ID_Output;
  category: Category;
  title: String;
  description: String;
  cookingTime: Int;
  difficulty: Difficulty;
  ingredients: String[];
  method: String[];
  notes: String[];
  tags: String[];
  source?: String;
  photo?: String;
  created: DateTimeOutput;
  updated: DateTimeOutput;
  published: Boolean;
}

export interface RecipePreviousValuesPromise
  extends Promise<RecipePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  category: () => Promise<Category>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  cookingTime: () => Promise<Int>;
  difficulty: () => Promise<Difficulty>;
  ingredients: () => Promise<String[]>;
  method: () => Promise<String[]>;
  notes: () => Promise<String[]>;
  tags: () => Promise<String[]>;
  source: () => Promise<String>;
  photo: () => Promise<String>;
  created: () => Promise<DateTimeOutput>;
  updated: () => Promise<DateTimeOutput>;
  published: () => Promise<Boolean>;
}

export interface RecipePreviousValuesSubscription
  extends Promise<AsyncIterator<RecipePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  category: () => Promise<AsyncIterator<Category>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  cookingTime: () => Promise<AsyncIterator<Int>>;
  difficulty: () => Promise<AsyncIterator<Difficulty>>;
  ingredients: () => Promise<AsyncIterator<String[]>>;
  method: () => Promise<AsyncIterator<String[]>>;
  notes: () => Promise<AsyncIterator<String[]>>;
  tags: () => Promise<AsyncIterator<String[]>>;
  source: () => Promise<AsyncIterator<String>>;
  photo: () => Promise<AsyncIterator<String>>;
  created: () => Promise<AsyncIterator<DateTimeOutput>>;
  updated: () => Promise<AsyncIterator<DateTimeOutput>>;
  published: () => Promise<AsyncIterator<Boolean>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
  email: String;
  username: String;
  passwordHash: String;
  role: Role;
  registered: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  username: () => Promise<String>;
  passwordHash: () => Promise<String>;
  role: () => Promise<Role>;
  registered: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
  passwordHash: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<Role>>;
  registered: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Role",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "Category",
    embedded: false
  },
  {
    name: "Difficulty",
    embedded: false
  },
  {
    name: "Recipe",
    embedded: false
  },
  {
    name: "Comment",
    embedded: true
  },
  {
    name: "Grade",
    embedded: true
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
